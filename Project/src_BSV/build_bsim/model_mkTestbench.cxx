/*
 * Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
 * 
 * On Sun Dec 10 02:13:30 IST 2023
 * 
 */
#include "bluesim_primitives.h"
#include "model_mkTestbench.h"

#include <cstdlib>
#include <time.h>
#include "bluesim_kernel_api.h"
#include "bs_vcd.h"
#include "bs_reset.h"


/* Constructor */
MODEL_mkTestbench::MODEL_mkTestbench()
{
  mkTestbench_instance = NULL;
}

/* Function for creating a new model */
void * new_MODEL_mkTestbench()
{
  MODEL_mkTestbench *model = new MODEL_mkTestbench();
  return (void *)(model);
}

/* Schedule functions */

static void schedule_posedge_CLK(tSimStateHdl simHdl, void *instance_ptr)
       {
	 MOD_mkTestbench &INST_top = *((MOD_mkTestbench *)(instance_ptr));
	 INST_top.INST_m.PORT_EN_get_res = (tUInt8)0u;
	 INST_top.INST_m.DEF_WILL_FIRE_get_res = (tUInt8)0u;
	 INST_top.INST_m.PORT_EN_put_A = (tUInt8)0u;
	 INST_top.INST_m.DEF_WILL_FIRE_put_A = (tUInt8)0u;
	 INST_top.INST_m.PORT_EN_put_B = (tUInt8)0u;
	 INST_top.INST_m.DEF_WILL_FIRE_put_B = (tUInt8)0u;
	 INST_top.DEF_CAN_FIRE_RL_rl_finish = INST_top.INST_m.METH_RDY_get_res();
	 INST_top.DEF_WILL_FIRE_RL_rl_finish = INST_top.DEF_CAN_FIRE_RL_rl_finish;
	 INST_top.DEF_CAN_FIRE_RL_rl_go = INST_top.INST_m.METH_RDY_put_B() && INST_top.INST_m.METH_RDY_put_A();
	 INST_top.DEF_WILL_FIRE_RL_rl_go = INST_top.DEF_CAN_FIRE_RL_rl_go;
	 INST_top.INST_m.DEF_CAN_FIRE_RL_exponentNormalisation = INST_top.INST_m.INST_stage1.METH_read();
	 INST_top.INST_m.DEF_WILL_FIRE_RL_exponentNormalisation = INST_top.INST_m.DEF_CAN_FIRE_RL_exponentNormalisation;
	 INST_top.INST_m.DEF_CAN_FIRE_RL_finalResult = INST_top.INST_m.INST_stage3.METH_read();
	 INST_top.INST_m.DEF_WILL_FIRE_RL_finalResult = INST_top.INST_m.DEF_CAN_FIRE_RL_finalResult;
	 INST_top.INST_m.DEF_got_B__h691 = INST_top.INST_m.INST_got_B.METH_read();
	 INST_top.INST_m.DEF_got_A__h689 = INST_top.INST_m.INST_got_A.METH_read();
	 INST_top.INST_m.DEF_CAN_FIRE_RL_preprocessing = INST_top.INST_m.DEF_got_A__h689 && INST_top.INST_m.DEF_got_B__h691;
	 INST_top.INST_m.DEF_WILL_FIRE_RL_preprocessing = INST_top.INST_m.DEF_CAN_FIRE_RL_preprocessing;
	 INST_top.INST_m.DEF_CAN_FIRE_RL_mantissaNormalisation = INST_top.INST_m.INST_stage2.METH_read();
	 INST_top.INST_m.DEF_WILL_FIRE_RL_mantissaNormalisation = INST_top.INST_m.DEF_CAN_FIRE_RL_mantissaNormalisation;
	 if (INST_top.DEF_WILL_FIRE_RL_rl_finish)
	   INST_top.RL_rl_finish();
	 if (INST_top.INST_m.DEF_WILL_FIRE_RL_finalResult)
	   INST_top.INST_m.RL_finalResult();
	 if (INST_top.DEF_WILL_FIRE_RL_rl_go)
	   INST_top.RL_rl_go();
	 if (INST_top.INST_m.DEF_WILL_FIRE_RL_mantissaNormalisation)
	   INST_top.INST_m.RL_mantissaNormalisation();
	 if (INST_top.INST_m.DEF_WILL_FIRE_RL_exponentNormalisation)
	   INST_top.INST_m.RL_exponentNormalisation();
	 if (INST_top.INST_m.DEF_WILL_FIRE_RL_preprocessing)
	   INST_top.INST_m.RL_preprocessing();
	 if (do_reset_ticks(simHdl))
	 {
	   INST_top.INST_m.INST_input_1_64.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_m.INST_input_2_64.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_m.INST_sign_out.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_m.INST_mantissa_A.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_m.INST_mantissa_B.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_m.INST_exponent_res_overbiased_1.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_m.INST_exponent_res_overbiased_2.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_m.INST_exponent_res_normalised_1.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_m.INST_exponent_res_normalised_2.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_m.INST_exponent_res_normalised_3.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_m.INST_mantissa_res_non_normalised.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_m.INST_mantissa_res_non_normalised_reduced.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_m.INST_mantissa_res_normalised.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_m.INST_answer.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_m.INST_got_A.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_m.INST_got_B.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_m.INST_stage1.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_m.INST_stage2.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_m.INST_stage3.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_m.INST_got_final.rst_tick__clk__1((tUInt8)1u);
	 }
       };

/* Model creation/destruction functions */

void MODEL_mkTestbench::create_model(tSimStateHdl simHdl, bool master)
{
  sim_hdl = simHdl;
  init_reset_request_counters(sim_hdl);
  mkTestbench_instance = new MOD_mkTestbench(sim_hdl, "top", NULL);
  bk_get_or_define_clock(sim_hdl, "CLK");
  if (master)
  {
    bk_alter_clock(sim_hdl, bk_get_clock_by_name(sim_hdl, "CLK"), CLK_LOW, false, 0llu, 5llu, 5llu);
    bk_use_default_reset(sim_hdl);
  }
  bk_set_clock_event_fn(sim_hdl,
			bk_get_clock_by_name(sim_hdl, "CLK"),
			schedule_posedge_CLK,
			NULL,
			(tEdgeDirection)(POSEDGE));
  (mkTestbench_instance->INST_m.set_clk_0)("CLK");
  (mkTestbench_instance->set_clk_0)("CLK");
}
void MODEL_mkTestbench::destroy_model()
{
  delete mkTestbench_instance;
  mkTestbench_instance = NULL;
}
void MODEL_mkTestbench::reset_model(bool asserted)
{
  (mkTestbench_instance->reset_RST_N)(asserted ? (tUInt8)0u : (tUInt8)1u);
}
void * MODEL_mkTestbench::get_instance()
{
  return mkTestbench_instance;
}

/* Fill in version numbers */
void MODEL_mkTestbench::get_version(char const **name, char const **build)
{
  *name = "2021.12.1";
  *build = "fd501401";
}

/* Get the model creation time */
time_t MODEL_mkTestbench::get_creation_time()
{
  
  /* Sat Dec  9 20:43:30 UTC 2023 */
  return 1702154610llu;
}

/* State dumping function */
void MODEL_mkTestbench::dump_state()
{
  (mkTestbench_instance->dump_state)(0u);
}

/* VCD dumping functions */
MOD_mkTestbench & mkTestbench_backing(tSimStateHdl simHdl)
{
  static MOD_mkTestbench *instance = NULL;
  if (instance == NULL)
  {
    vcd_set_backing_instance(simHdl, true);
    instance = new MOD_mkTestbench(simHdl, "top", NULL);
    vcd_set_backing_instance(simHdl, false);
  }
  return *instance;
}
void MODEL_mkTestbench::dump_VCD_defs()
{
  (mkTestbench_instance->dump_VCD_defs)(vcd_depth(sim_hdl));
}
void MODEL_mkTestbench::dump_VCD(tVCDDumpType dt)
{
  (mkTestbench_instance->dump_VCD)(dt, vcd_depth(sim_hdl), mkTestbench_backing(sim_hdl));
}
